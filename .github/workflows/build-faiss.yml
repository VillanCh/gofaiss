name: Build Faiss Libraries

on:
  workflow_dispatch:
    inputs:
      faiss_version:
        description: 'Faiss version to build (e.g., v1.11.0)'
        required: true
        default: 'v1.11.0'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            arch: arm64
            name: darwin-arm64
          - os: ubuntu-latest
            arch: amd64
            name: linux-amd64
          - os: ubuntu-latest
            arch: arm64
            name: linux-arm64
          - os: windows-latest
            arch: amd64
            name: windows-amd64

    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    #---------------------------------------------------
    # Step 1: Set up build environment
    #---------------------------------------------------
    - name: Set up build environment (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libopenblas-dev

    - name: Set up build environment (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install libomp openblas

    #---------------------------------------------------
    # Step 2: Build Faiss
    #---------------------------------------------------
    - name: Set up and Build Faiss (Linux arm64)
      if: matrix.name == 'linux-arm64'
      uses: uraimo/run-on-arch-action@v2
      with:
        arch: aarch64
        distro: ubuntu22.04
        githubToken: ${{ github.token }}
        run: |
          apt-get update
          apt-get install -y build-essential libopenblas-dev git wget gnupg ca-certificates
          wget -qO- "https://apt.kitware.com/keys/kitware-archive-latest.asc" | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null
          apt-get update
          apt-get install -y cmake
          git clone https://github.com/facebookresearch/faiss.git
          cd faiss
          git checkout ${{ inputs.faiss_version }}
          cmake . -B build \
            -DFAISS_ENABLE_GPU=OFF \
            -DBUILD_SHARED_LIBS=ON \
            -DFAISS_ENABLE_PYTHON=OFF \
            -DBUILD_TESTING=OFF \
            -DFAISS_BUILD_C_API=ON \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build build -j 2
          cmake --install build --prefix dist

    - name: Build Faiss (macOS)
      if: matrix.name == 'darwin-arm64'
      shell: bash
      run: |
        git clone https://github.com/facebookresearch/faiss.git
        cd faiss
        git checkout ${{ inputs.faiss_version }}
        cmake . -B build \
          -DOpenMP_ROOT=$(brew --prefix libomp) \
          -DFAISS_ENABLE_GPU=OFF \
          -DBUILD_SHARED_LIBS=ON \
          -DFAISS_ENABLE_PYTHON=OFF \
          -DBUILD_TESTING=OFF \
          -DFAISS_BUILD_C_API=ON \
          -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release -j 2
        cmake --install build --prefix dist

    - name: Build Faiss (Linux amd64)
      if: matrix.name == 'linux-amd64'
      shell: bash
      run: |
        git clone https://github.com/facebookresearch/faiss.git
        cd faiss
        git checkout ${{ inputs.faiss_version }}
        cmake . -B build \
          -DFAISS_ENABLE_GPU=OFF \
          -DBUILD_SHARED_LIBS=ON \
          -DFAISS_ENABLE_PYTHON=OFF \
          -DBUILD_TESTING=OFF \
          -DFAISS_BUILD_C_API=ON \
          -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release -j 2
        cmake --install build --prefix dist

    - name: Build Faiss (Windows amd64)
      if: matrix.name == 'windows-amd64'
      shell: pwsh
      run: |
        # Install OpenBLAS using vcpkg
        Write-Host "Setting up vcpkg..."
        $VCPKG_ROOT = "D:/vcpkg"
        git clone https://github.com/Microsoft/vcpkg.git $VCPKG_ROOT
        & "$VCPKG_ROOT/bootstrap-vcpkg.bat"
        Write-Host "Installing OpenBLAS and LAPACK via vcpkg..."
        & "$VCPKG_ROOT/vcpkg" install openblas:x64-windows lapack-reference:x64-windows --recurse
        
        # Set the CMAKE_TOOLCHAIN_FILE environment variable for subsequent steps
        $env:CMAKE_TOOLCHAIN_FILE = "$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
        Write-Host "CMAKE_TOOLCHAIN_FILE environment variable set to: $env:CMAKE_TOOLCHAIN_FILE"

        Write-Host "Cloning Faiss..."
        git clone https://github.com/facebookresearch/faiss.git
        cd faiss
        git checkout ${{ inputs.faiss_version }}
        
        Write-Host "Configuring Faiss with CMake..."
        # CMake will automatically use the CMAKE_TOOLCHAIN_FILE environment variable
        cmake . -B build `
          -DFAISS_ENABLE_GPU=OFF `
          -DBUILD_SHARED_LIBS=ON `
          -DFAISS_ENABLE_PYTHON=OFF `
          -DBUILD_TESTING=OFF `
          -DFAISS_BUILD_C_API=ON `
          -DCMAKE_BUILD_TYPE=Release
        
        Write-Host "Building Faiss..."
        cmake --build build --config Release -j 2
        Write-Host "Installing Faiss..."
        cmake --install build --prefix dist

    #---------------------------------------------------
    # Step 3: Prepare Artifacts
    #---------------------------------------------------
    - name: Prepare Artifacts for Upload
      run: |
        # Create the directory structure for the artifact
        ARTIFACT_DIR="artifact/faisslib/${{ inputs.faiss_version }}/${{ matrix.name }}"
        mkdir -p "${ARTIFACT_DIR}"
        
        SOURCE_PATH="faiss/dist"
        
        # Copy header files (they should be present if build was successful)
        if [ -d "$SOURCE_PATH/include/faiss" ]; then
            mkdir -p "${ARTIFACT_DIR}/include"
            cp -r $SOURCE_PATH/include/faiss "${ARTIFACT_DIR}/include/"
        fi
        
        # Copy library files based on OS
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          mkdir -p "${ARTIFACT_DIR}/lib"
          cp $SOURCE_PATH/lib/libfaiss.so* "${ARTIFACT_DIR}/lib/"
          cp $SOURCE_PATH/lib/libfaiss_c.so* "${ARTIFACT_DIR}/lib/"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          mkdir -p "${ARTIFACT_DIR}/lib"
          cp $SOURCE_PATH/lib/libfaiss.dylib* "${ARTIFACT_DIR}/lib/"
          cp $SOURCE_PATH/lib/libfaiss_c.dylib* "${ARTIFACT_DIR}/lib/"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          mkdir -p "${ARTIFACT_DIR}/bin"
          mkdir -p "${ARTIFACT_DIR}/lib"
          cp $SOURCE_PATH/bin/faiss.dll "${ARTIFACT_DIR}/bin/"
          cp $SOURCE_PATH/bin/faiss_c.dll "${ARTIFACT_DIR}/bin/"
          cp $SOURCE_PATH/lib/faiss.lib "${ARTIFACT_DIR}/lib/"
          cp $SOURCE_PATH/lib/faiss_c.lib "${ARTIFACT_DIR}/lib/"
        fi
      shell: bash

    #---------------------------------------------------
    # Step 4: Upload Artifact
    #---------------------------------------------------
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: faiss-libs-${{ matrix.name }}
        path: artifact/

  package-artifacts:
    name: Package all artifacts into a zip
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files for debugging
        run: ls -R artifacts

      - name: Zip the artifacts
        run: zip -r faiss-libs-${{ inputs.faiss_version }}.zip artifacts

      - name: Upload final zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: faiss-libs-all-platforms
          path: faiss-libs-${{ inputs.faiss_version }}.zip 